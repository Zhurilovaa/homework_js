class XMLHService{constructor(){this.xhr=new XMLHttpRequest,console.log("Всё работает! Сервис через XMLHttpRequest создан!")}async GetAllTasks(t){let e=t+"tasks";return await new Promise(((t,s)=>{this.xhr.open("GET",e),this.xhr.onload=()=>{200!=this.xhr.status?t("Ошибка "+this.xhr.status+" "+this.xhr.statusText):t(JSON.parse(this.xhr.response))},this.xhr.onerror=()=>s("Запрос не удался"),this.xhr.send()})).then((t=>t)).catch((t=>t))}async GetTaskById(t,e){let s=t+"tasks/"+String(e);return await new Promise(((t,e)=>{this.xhr.open("GET",s),this.xhr.onload=()=>{200!=this.xhr.status?t("Ошибка "+this.xhr.status+" "+this.xhr.statusText):t(JSON.parse(this.xhr.response))},this.xhr.onerror=()=>e("Запрос не удался"),this.xhr.send()})).then((t=>t)).catch((t=>t))}async PostTask(t,e){let s=t+"tasks";return e=JSON.stringify(e),await new Promise(((t,a)=>{this.xhr.open("POST",s),this.xhr.setRequestHeader("Content-type","application/json; charset=utf-8"),this.xhr.onload=()=>{this.xhr.status<200||this.xhr.status>=300?t("Ошибка "+this.xhr.status+" "+this.xhr.statusText):t(JSON.parse(this.xhr.response))},this.xhr.onerror=()=>a("Запрос не удался"),this.xhr.send(e)})).then((t=>t)).catch((t=>t))}async PatchTask(t,e,s){let a=t+"tasks/"+String(e);return s=JSON.stringify(s),await new Promise(((t,e)=>{this.xhr.open("PATCH",a),this.xhr.setRequestHeader("Content-type","application/json; charset=utf-8"),this.xhr.onload=()=>{this.xhr.status<200||this.xhr.status>=300?t("Ошибка "+this.xhr.status+" "+this.xhr.statusText):t(JSON.parse(this.xhr.response))},this.xhr.onerror=()=>e("Запрос не удался"),this.xhr.send(s)})).then((t=>t)).catch((t=>t))}async DeleteTask(t,e){let s=t+"tasks/"+String(e);return await new Promise(((t,e)=>{this.xhr.open("DELETE",s),this.xhr.onload=()=>{200!=this.xhr.status?t("Ошибка "+this.xhr.status+" "+this.xhr.statusText):t(JSON.parse(this.xhr.response))},this.xhr.onerror=()=>e("Запрос не удался"),this.xhr.send()})).then((t=>t)).catch((t=>t))}}class FetchSrvice{constructor(){console.log("Всё работает! Сервис через Fetch создан!")}async GetAllTasks(t){let e=t+"tasks";return await fetch(e,{method:"GET"}).then((t=>t.json())).catch((t=>t))}async GetTaskById(t,e){let s,a,r=t+"tasks/"+String(e),o=await fetch(r,{method:"GET"});return o.ok?(s=o.json(),s):(a="Ошибка HTTP: "+o.status,a)}async PostTask(t,e){let s=t+"tasks";return e=JSON.stringify(e),await fetch(s,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:e}).then((t=>t.json())).catch((t=>t))}async PatchTask(t,e,s){let a=t+"tasks/"+String(e);return s=JSON.stringify(s),await fetch(a,{method:"PATCH",headers:{"Content-Type":"application/json;charset=utf-8"},body:s}).then((t=>t.json())).catch((t=>t))}async DeleteTask(t,e){let s=t+"tasks/"+String(e);return await fetch(s,{method:"DELETE"}).then((t=>t.json())).catch((t=>t))}}class ControllerService{constructor(t,e){this.typeOfService=t,"fetch"===t?this.service=new FetchSrvice:"XMLH"===t?this.service=new XMLHService:console.log("Don't find service with this type!"),this.url=e,console.log("Всё работает! Controller создан!")}async GetAllTasks(){return await this.service.GetAllTasks(this.url)}async GetTaskById(t){return await this.service.GetTaskById(this.url,t)}async PostTask(t){return await this.service.PostTask(this.url,t)}async PatchTask(t,e){return await this.service.PatchTask(this.url,t,e)}async DeleteTask(t){return await this.service.DeleteTask(this.url,t)}}let typeOfService="fetch";const urlServer="http://37.220.80.108/";async function GetAllTaskConsole(t){let e=await t.GetAllTasks();console.log(`${t.typeOfService} : Get all task: `),console.log(e),GetTaskById(t,[e[0].id,e[1].id,e[2].id])}async function GetTaskById(t,e){console.log(`id for Post : ${e}`);for(let s of e){let e=await t.GetTaskById(s);console.log(`${t.typeOfService} : Get task by id = ${s}: `),console.log(e)}let s=await t.GetTaskById(e[0]-1);console.log(`${t.typeOfService} : Get task by id = ${e[0]-1}: `),console.log(s),PostTask(t)}async function PostTask(t){let e=[{name:"my_task",info:`(my my task)))) ${t.typeOfService}`,isImportant:!1},{name:"my_task_2",info:`(my my task_2)))) ${t.typeOfService}`,isImportant:!1},{name:"my_task_3",info:`(my my task_3))))${t.typeOfService}`,isImportant:!0}],s=[];for(newTaskElem of e){let e=await t.PostTask(newTaskElem);console.log(`${t.typeOfService} : Post task: `),console.log(e),s.push(e.id)}PatchTask(t,s)}async function PatchTask(t,e){let s=[{name:`my_task_patch ${t.typeOfService}`,info:`_patch_(my my task)))) ${t.typeOfService}`,isImportant:!1},{name:`my_task_2_patch ${t.typeOfService}`,info:`_patch_(my my task_2)))) ${t.typeOfService}`,isImportant:!1},{name:`my_task_3_patch ${t.typeOfService}`,info:`_patch_(my my task_3))))${t.typeOfService}`,isImportant:!0}];for(let a=0;a<3;a++){let r=await t.PatchTask(e[a],s[a]);console.log(`${t.typeOfService} : Patch task: `),console.log(r)}DeleteTask(t,e)}async function DeleteTask(t,e){for(let s of e){let e=await t.DeleteTask(s);console.log(`${t.typeOfService} : Delete task by id = ${s}: `),console.log(e)}let s=await t.GetAllTasks();console.log("ПРОВЕРКА, ЧТО НА СЕРВЕРЕ НЕ ОСТАЛОСЬ МОИХ ЗАДАЧ)))))"),console.log(`${t.typeOfService} : Get all task: `),console.log(s)}const ControllerServiceFetch=new ControllerService(typeOfService,urlServer);GetAllTaskConsole(ControllerServiceFetch),typeOfService="XMLH";const ControllerServiceXMLH=new ControllerService(typeOfService,urlServer);GetAllTaskConsole(ControllerServiceXMLH);